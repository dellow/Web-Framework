

// ---
// nudge
// Primarily for use with Margin and Padding. Outputs an even spacing based on the Magic Number
// in REM units with a PX fallback for legacy browsers.
// Any value supplied will be multipled by the Magic Number. If the value is supplied with a
// PX value it will be left as is.
//
// @uses px-to-rem()
// @uses $mn
//
// .foo {@include nudge(margin, 1 1.5 2 1);}
// ---
@mixin nudge($selector, $sizes, $important: false){
  $rem_sizes: ();
  $px_sizes: ();

  @each $size in $sizes {
    @if ($size == "auto") {
      $rem_sizes: append($rem_sizes, auto);
      $px_sizes : append($px_sizes, auto);
    } @else if (unit($size) != "") {
      $rem_sizes: append($rem_sizes, $size);
      $px_sizes : append($px_sizes, $size);
    } @else {
      $rem_sizes: append($rem_sizes, px-to-rem($size * $mn));
      $px_sizes : append($px_sizes, $size * $mn);
    }
  }

  @if ($important) {
    #{$selector}: $px_sizes !important;
    #{$selector}: $rem_sizes !important;
  } @else {
    #{$selector}: $px_sizes;
    #{$selector}: $rem_sizes;
  }
}


// ----------------------------------------------------------------------- //


// ---
// modify-grid
// Changes a grid.
//
// .foo {@include modify-grid(2);}
// ---
@mixin modify-grid($gutterValue, $col: false, $all: false){
  $grid_selector: '';
  $flex_grid_selector: '';

  @if ($all == false) {
    $flex_grid_selector: '> .flex-grid, &.flex-grid';
  } @else {
    $flex_grid_selector: '.flex-grid, &.flex-grid';
  }

  #{$flex_grid_selector} {
    $value: px-to-rem($gutterValue * $mn);
    width: calc(100% + #{$value});
    @include nudge(margin-top, -$gutterValue);
  	display: flex;
  	flex-direction: row;
  	flex-wrap: wrap;
    @include nudge(margin-left, -$gutterValue);
  	&--no-gutter {
  		width: 100%;
  	}
    &--full-height {
      height: calc(100% + #{$value});
    }
    > [class*="col-"] {
      @if ($col) {
        width: $col;
      }
      @include nudge(padding, $gutterValue 0 0 $gutterValue);
    }
  }
}


// ----------------------------------------------------------------------- //


// ---
// respond-to
// Responsive breakpoints.
//
// @include respond-to(768px){.foo {display: block;}}
// ---
@mixin respond-to($breakpoint1, $breakpoint2: null, $mobileFirst: true) {
  @if ($breakpoint2 != null) {
    @media only screen and (min-width: $breakpoint1) and (max-width: $breakpoint2) {
      @content
    };
  } @else {
    // If $mobileFirst is set to true use min-width.
    $operator: if($mobileFirst, 'min-width', 'max-width');
    @media only screen and ($operator: $breakpoint1) {
      @content
    };
  }
}


// ----------------------------------------------------------------------- //
