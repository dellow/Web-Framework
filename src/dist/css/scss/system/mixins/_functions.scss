// ==========================================================================
// Mixins > Functions
// Functions that aid development or other mixins.
// ==========================================================================


// ---
// color
// Gets color and tone from map.
//
// .foo {@include color(red, base);}
// ---
@function color($color, $tone: 'base') {
  @if map-has-key($colors, $color) {
    @return map-get(map-get($colors, $color), $tone);
  }
  @else {
    @return #6cff00;
  }
}


// ----------------------------------------------------------------------- //


// ---
// percentage
// Takes a given value in PX and returns a percentage of it.
//
// .foo {@include percentage(500px, 50%);}
// .foo {@include percentage(500, 50);}
// ---
@function percentage($value, $percentage) {
  $newValue: (strip-unit($value) / 100) * strip-unit($percentage);

  @return #{$newValue + px};
}


// ----------------------------------------------------------------------- //


// ---
// strip-unit
// Simply strips the unit from any string.
// ---
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


// ----------------------------------------------------------------------- //


// ---
// number
// Cast string as number.
// ---
@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);;
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}


// ----------------------------------------------------------------------- //


// ---
// str-replace
// String replace
// ---
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


// ----------------------------------------------------------------------- //


// ---
// px-to-rem
// Takes a single value or a list of values and replaces px units with rem
// Zero values will remain 0.
// Non-px values will not be modified.
// You can return an em value by passing the $unit var as 'em'
// ---
@function px-to-rem($px, $unit: rem) {
  $return: ();

  @each $var in $px {
    @if type-of($var) == 'number' and unit($var) == 'px' and abs($var) > 0 {
      $return: append($return, #{$var/16px+$unit}, space);
    }
    @else {
      $return: append($return, $var, space);
    }
  }

  @return $return;
}


// ----------------------------------------------------------------------- //
