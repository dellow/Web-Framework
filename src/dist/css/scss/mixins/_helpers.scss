// ==========================================================================
// Mixins > Helpers
// Functions and mixins that aid development or other mixins.
// ==========================================================================


// ---
// color
// Gets color and tone from map.
//
// .foo {@include color(red, base);}
// ---
@function color($color, $tone: 'base'){
  @if map-has-key($colors, $color) {
    @return map-get(map-get($colors, $color), $tone);
  }
  @else {
    @return #6cff00;
  }
}


// ----------------------------------------------------------------------- //


// ---
// percentage
// Takes a given value in PX and returns a percentage of it.
//
// .foo {@include percentage(500px, 50%);}
// .foo {@include percentage(500, 50);}
// ---
@function percentage($value, $percentage){
  $newValue: (strip-unit($value) / 100) * strip-unit($percentage);

  @return #{$newValue + px};
}


// ----------------------------------------------------------------------- //


// ---
// strip-unit
// Simply strips the unit from any string.
// ---
@function strip-unit($number){
  @if type-of($number) == 'number' and not unitless($number){
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


// ----------------------------------------------------------------------- //


// ---
// px-to-rem
// Takes a single value or a list of values and replaces px units with rem
// Zero values will remain 0.
// Non-px values will not be modified.
// You can return an em value by passing the $unit var as 'em'
// ---
@function px-to-rem($px, $unit: rem){
  $return: ();

  @each $var in $px {
    @if type-of($var) == 'number' and unit($var) == 'px' and abs($var) > 0 {
      $return: append($return, #{$var/16px+$unit}, space);
    }
    @else {
      $return: append($return, $var, space);
    }
  }

  @return $return;
}


// ----------------------------------------------------------------------- //


// ---
// modify-grid
// Temporarily modifies the grid system
//
// .foo {@include modify-grid(2, $col-1-2);}
// ---
@mixin modify-grid($gutterValue, $col: false, $all: false){
  $grid_selector     : '';
  $flex_grid_selector: '';

  @if($all == false){
    $grid_selector: '> .grid, &.grid';
  }
  @else{
    $grid_selector: '.grid, &.grid';
  }
  #{$grid_selector} {
    $value: px-to-rem($gutterValue * $mn);
    width: calc(100% + #{$value});
    @include nudge(margin-top, -$gutterValue);
    @include nudge(left, -$gutterValue);
    > [class*="col-"] {
      @if($col){
        width: $col;
      }
      @include nudge(padding, $gutterValue 0 0 $gutterValue);
    }
  }

  @if($all == false){
    $flex_grid_selector: '> .flex-grid, &.flex-grid';
  }
  @else{
    $flex_grid_selector: '.flex-grid, &.flex-grid';
  }
  #{$flex_grid_selector} {
    $value: px-to-rem($gutterValue * $mn);
    width: calc(100% + #{$value});
    @include nudge(margin-top, -$gutterValue);
    @include nudge(left, -$gutterValue);
    > [class*="col-"] {
      @if($col){
        width: $col;
      }
      @include nudge(padding, $gutterValue 0 0 $gutterValue);
    }
  }
}


// ----------------------------------------------------------------------- //
