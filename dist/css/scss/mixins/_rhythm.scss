/* ==========================================================================
   Mixins > Typography
   Font size and typesetting mixins.
========================================================================== */
/**
 * px-to-rem
 * Takes a single value or a list of values and replaces px units with rem
 * Zero values will remain 0.
 * Non-px values will not be modified.
 * You can return an em value by passing the $unit var as 'em'
**/
@function px-to-rem($px, $unit: rem){
    $return: ();

    @each $var in $px {
        @if type-of($var) == 'number' and unit($var) == 'px' and abs($var) > 0 {
            $return: append($return, #{$var/16px}$unit, space);
        }
        @else {
            $return: append($return, $var, space);
        }
    }

    @return $return;
}

/**
 * rhythm
 * Outputs a perfect vertical rhythm for a particular font-size
 * in a margin / line-height and font-size format. You optionally specify
 * whether to set the line-height or margin. I would because... that's the
 * point of this mixin.
 *
 * @uses px-to-rem()
 * @uses $line_height_base
 * @uses $mn
 *
 * .foo {@include rhythm(20px, true, false);}
**/
@mixin rhythm($size, $line-height: true, $margin: true){
    @if $margin {
        margin-bottom: 0px + ($mn / 1.75);
        margin-bottom: px-to-rem($mn / 1.75);
    }
    font-size: 0px + $size;
    font-size: px-to-rem($size);
    @if $line-height {
        line-height: ceil($size / $line_height_base) * ($line_height_base / $size);
    }
}

/**
 * rem
 * Output a selector with px fallback and rem values, so that modern browsers will use the rem values.
 * Both multiple selectors and multiple sizes in multiple units can be provided.
 *
 * @uses px-to-rem()
 *
 * .foo {@include rem(font-size, 20px);}
 * .foo {@include rem(font-size height, 20px);}
**/
@mixin rem($selectors, $size){
    @each $selector in $selectors {
        #{$selector}: $size;
        #{$selector}: px-to-rem($size);
    }
}

/**
 * nudge
 * Primarily for use with Margin and Padding. Outputs an even spacing based on the Magic Number
 * in REM units with a PX fallback for legacy browsers.
 * Any value supplied will be multipled by the Magic Number. If the value is supplied with a
 * PX value it will be left as is.
 *
 * @uses px-to-rem()
 * @uses $mn
 *
 * .foo {@include nudge(margin, 1 1.5 2 1);}
**/
@mixin nudge($selector, $sizes){
    $rem_sizes: ();
    $px_sizes: ();

    @each $size in $sizes {
        @if unit($size) != "" {
            $rem_sizes: append($rem_sizes, $size);
            $px_sizes: append($px_sizes, $size);
        }
        @else {
            $rem_sizes: append($rem_sizes, px-to-rem($size * $mn));
            $px_sizes: append($px_sizes, $size * $mn);
        }
    }

    #{$selector}: $px_sizes;
    #{$selector}: $rem_sizes;
}