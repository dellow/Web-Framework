/* ==========================================================================
   Mixins > Misc
   Functions and mixins for various Framework operations.
========================================================================== */
/**
 * color
 * Gets color and tone from map.
 *
 * .foo {@include color(red, base);}
**/
@function color($color, $tone: 'base'){
    @return map-get(map-get($colors, $color), $tone);
}

/**
 * retina-image
 * Retina image replacement.
 *
 * .foo {@include retina-image('logo', 'png', 100px, 25px);}
**/
@mixin retina-image($image, $type, $width, $height){
	@media (min--moz-device-pixel-ratio: 1.3),
	     (-o-min-device-pixel-ratio: 2.6/2),
	     (-webkit-min-device-pixel-ratio: 1.3),
	     (min-device-pixel-ratio: 1.3),
	     (min-resolution: 1.3dppx){
		background-image: url($image + '@2x.' + $type);
		background-size: $width $height;
	}
	background-image: url($image + '.' + $type);
}

/**
 * modify-grid
 * Temporarily modifies the grid system
 *
 *	.foo {
		@include modify-grid(6%, $col-1-2);
 *	}
**/
@mixin modify-grid($gutter, $col){
	> .grid, &.grid {
		width: 100% + $gutter;
		margin-top: -$gutter;
		left: -$gutter;
		> [class*="col-"] {
			width: $col - $gutter;
			margin: $gutter 0 0 $gutter;
		}
	}
	> .flex-grid, &.flex-grid {
		width: 100% + $gutter;
		margin-top: -$gutter;
		left: -$gutter;
		> [class*="col-"] {
			margin: $gutter 0 0 $gutter;
			max-width              : $col - $gutter;
			-webkit-flex-basis     : $col - $gutter;
			-ms-flex-preferred-size: $col - $gutter;
			flex-basis             : $col - $gutter;
		}
	}
}

/**
 * transition
 * Cross browser transition.
 *
 * .foo {@include transition(color $animation ease);}
**/
@mixin transition($pattern...){
	-webkit-transition: $pattern;
	-moz-transition   : $pattern;
	-o-transition     : $pattern;
	transition        : $pattern;
}

/**
 * opacity
 * Cross browser opacity.
 *
 * .foo {@include opacity(0.7);}
**/
@mixin opacity($opacity){
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=(" + $opacity * 100 + "))";
	filter    : alpha(opacity=$opacity * 100);
	opacity   : $opacity;
}

/**
 * inline-block
 * Cross browser inline-block.
 *
 * .foo {@include inline-block;}
**/
@mixin inline-block(){
	display: inline-block;
	zoom: 1; *display: inline; /* IE Fix */
}

/**
 * trigram
 * Trigram for Heaven mobile icon.
 *
 * .foo {@include trigram(30px, 40px, #000000, #FF0000);}
**/
@mixin trigram($width, $size, $color, $hover){
	position: relative;
	padding-left: 1.25em;
	font-size: $size;
	&:before {
		width: $width;
		height: 0.15em;
		content: "";
		position: absolute;
		left: 0;
		box-shadow: 0 0.25em 0 0 $color, 0 0.5em 0 0 $color;
		background: $color;
		@include transition($animation background ease, $animation box-shadow ease);
	}
	&:hover:before {
		box-shadow: 0 0.25em 0 0 $hover, 0 0.5em 0 0 $hover;
		background: $hover;
	}
}

/**
 * arrow
 * CSS Arrow.
 *
 * .foo {@include arrow(15px, #f9f7f3, 10px, null, 5px, left);}
**/
@mixin arrow($size, $color, $top, $left, $margin, $position, $type: 'after'){
	&:#{$type} {
		width: 0;
		height: 0;
		position: relative;
		@include inline-block;
		top: $top;
		@if($left != null){
			left: $left;
		}
		border: solid transparent;
		content: " ";
		pointer-events: none;
		@if($position == left){
			@if($margin != null){
				margin-right: $margin;
			}
			border-right-color: $color;
		}
		@else if($position == right){
			@if($margin != null){
				margin-left: $margin;
			}
			border-left-color: $color;
		}
		@else if($position == top){
			@if($margin != null){
				margin-bottom: $margin;
			}
			border-bottom-color: $color;
		}
		@else if($position == bottom){
			@if($margin != null){
				margin-top: $margin;
			}
			border-top-color: $color;
		}
		border-width: $size;
	}
}