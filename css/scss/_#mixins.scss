// Sprites from folder
//@import "foldername/*.png";
//@include all-foldername-sprites;

// EM font sizing
//.foo {font-size: em(16);}
@function em($pixels) {
	@return #{$pixels/16}em
}

// REM font sizing
//.foo {font-size: rem(16);}
@function rem($pixels) {
	@return #{$pixels/16}rem
}

// REM font sizing
//.foo {@include rem(13);}
@mixin rem($pixels: 12){
	font-size: $pixels + px;
	font-size: (0.125 * $pixels) + rem;
}

// Box Sizing
//.foo {@include box-sizing(border-box);}
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model;
	-moz-box-sizing   : $box-model;
	-o-box-sizing     : $box-model;
	-ms-box-sizing    : $box-model;
	box-sizing        : $box-model;
}

// Border Radius
//.foo {@include border-radius(border-box);}
@mixin border-radius($radius) {
	border-radius: $radius;
	background-clip: padding-box;
}

// Retina image replacement
// .foo {@include retina-image('logo', 'png', 100px, 25px);}
@mixin retina-image($image, $type, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	     (-o-min-device-pixel-ratio: 2.6/2),
	     (-webkit-min-device-pixel-ratio: 1.3),
	     (min-device-pixel-ratio: 1.3),
	     (min-resolution: 1.3dppx) {
		background-image: url($image + '@2x.' + $type);
		background-size: $width $height;
	}
	background-image: url($image + '.' + $type);
}

// Cross browser transition
// .foo {@include transition(color 500ms ease);}
@mixin transition($pattern...) {
	-webkit-transition: $pattern;
	-moz-transition   : $pattern;
	-o-transition     : $pattern;
	transition        : $pattern;
}

// Cross browser opacity
// .foo {@include opacity(0.7);}
@mixin opacity($opacity) {
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=(" + $opacity * 100 + "))";
	filter    : alpha(opacity=$opacity * 100);
	opacity   : $opacity;
}

// Cross browser inline-block
// .foo {@include inline-block;}
@mixin inline-block() {
	display: inline-block;
	zoom: 1; *display: inline; /* IE Fix */
}

// Overflow ellipsis
// .foo {@include ellipsis;}
@mixin ellipsis() {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

// CSS Arrow
// .foo {@include arrow(15px, #f9f7f3, 10px, null, left);}
@mixin arrow($size, $color, $top, $left, $position) {
	&:after {
		width: 0;
		height: 0;
		position: absolute;
		top: $top;
		@if($left != null){
			left: $left;
		}
		border: solid transparent;
		content: " ";
		pointer-events: none;
		@if($position == left){
			right: 100%;
			border-right-color: $color;
		}
		@else if($position == right){
			left: 100%;
			border-left-color: $color;
		}
		@else if($position == top){
			bottom: 100%;
			border-bottom-color: $color;
		}
		@else if($position == bottom){
			top: 100%;
			border-top-color: $color;
		}
		border-width: $size;
	}
}

// respond breakpoints
// @include respond-to(iphone) {.foo {display: block;}}
@mixin respond-to($device, $up-to: false) {
	@if($up-to) {
		@if($device == iphone-portrait) {
			@media only screen and (max-width: $iphone-portrait) {
				@content
			}
		}
		@else if($device == iphone-landscape) {
			@media only screen and (max-width: $iphone-landscape) {
				@content
			}
		}
		@else if($device == ipad-portrait) {
			@media only screen and (max-width: $ipad-portrait) {
				@content
			}
		}
		@else if($device == ipad-landscape) {
			@media only screen and (max-width: $ipad-landscape) {
				@content
			}
		}
	}
	@else{
		@if($device == retina-display) {
			@media only screen and (-webkit-min-device-pixel-ratio: 2) {
				@content
			}
		}
		@else if($device == iphone) {
			@media only screen and (min-width: $iphone-portrait) and (max-width: $iphone-landscape) {
				@content
			}
		}
		@else if($device == ipad) {
			@media only screen and (min-width: $ipad-portrait) and (max-width: $ipad-landscape) {
				@content
			}
		}
	}
}
